/**
@class B::Object

Base class with reference count support.

Together with the template class Ref, this class implements
a simple garbage collection technique based on reference count.
*/

/**
@fn B::Object::operator new(size_t uSize)

Allocates objects of the derived classes using own
memory allocation technique.

@throws B::Memory::Exception in case of the memory allocation error.
*/

/**
@fn B::Object::Object()

Initializes the reference count with zero. The default
constructor is placed in the protected section to force
inheritance.
*/

/**
@fn B::Object::Object(const B::Object&)

Initializes the reference count with zero.
A newly created object has no references,
even if it is a copy of an existing object.
*/

/**
@fn B::Object::Object(const B::Object&)

Initializes the reference count with zero.
A newly created object has no references,
even if it is a copy of the existing object.
*/

/**
@fn void B::Object::AddRef() const

Increases the reference count protecting this object
from being removed.
*/

/**
@fn void B::Object::Release() const

Decreases the reference count, and, if it goes to zero,
deletes this object.
*/

/**
@fn B::Object& B::Object::operator =(B::Object&)

Protects the reference counter from being modified
by the default (generated by the compiler)
assignment operator.
*/

/**
@fn B::Object::~Object()

Protected destructor prohibits direct calls to
<code>operator delete</code>.
*/

/**
@var RefCount B::Object::m_Refs

The reference count object. It is declared as mutable,
so that reference controlling functions AddRef() and
Release() can manipulate constant objects.
*/
