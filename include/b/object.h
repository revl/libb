/*
 * B: Common C++ library
 * Copyright (C) 2002-2007, 2016 Damon Revoe
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

#ifndef B_OBJECT_H
#define B_OBJECT_H

#include "ref_count.h"
#include "memory.h"

B_BEGIN_NAMESPACE

// Base class with reference count support.
class object
{
// Construction
public:
	// Allocates objects of the derived classes.
	static void* operator new(size_t size);

	// Deallocates objects previously allocated by operator new.
	// Inlined here to get rid of a warning issued by gcc 4.0.1:
	// 'operator delete' was used before it was declared inline.
	static void operator delete(void* object, size_t size)
	{
		Memory::FixedFree(object, size);
	}

protected:
	// Initializes the reference count with zero.
	object();

	// Initializes the reference count with zero.
	object(const object&);

// Operations
public:
	// Increases the reference count by one protecting
	// this object from being deleted.
	void add_ref() const;

	// Decreases the reference count, and, if it becomes
	// zero, deletes this object.
	void release() const;

	// Protects the reference counter from being modified
	// by the default (generated by the compiler)
	// assignment operator.
	object& operator =(object&);

// Implementation
protected:
	// Protected destructor prohibits direct calls to
	// operator delete.
	virtual ~object()
	{
		B_ASSERT(refs <= 0);
	}

	// The reference count object.
	mutable ref_count refs;
};

inline void* object::operator new(size_t size)
{
	return Memory::FixedAlloc(size > B_MIN_FIXED_ALLOC ?
		size : B_MIN_FIXED_ALLOC);
}

inline object::object()
{
	refs = 0;
}

inline object::object(const object&)
{
	refs = 0;
}

inline void object::add_ref() const
{
	++refs;
}

inline void object::release() const
{
	B_ASSERT(this != NULL);

	if (!--refs)
		delete const_cast<object*>(this);
}

inline object& object::operator =(object&)
{
	return *this;
}

B_END_NAMESPACE

#include <b/ref.h>

#endif /* !defined(B_OBJECT_H) */
