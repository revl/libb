The B library is a collection of data structures, algorithms, and utility
classes and functions.

Why write another library of generic types when there is the C++ Standard
Library?  The main reason is to have a full control over the implementation.
The problem is, the Standard Library is not really a library. Rather, it is a
Library Standard. It defines the API that the standard library of every C++
compiler must conform to. However, there is no reference or universal
implementation of the library.  The multiplatform nature of C++ is one of the
apparent explanations for that.  I for one need to know what goes into my
application.  I need to know implementation details.  And I'm willing to
sacrifice compatibility with non-POSIX systems to achieve that goal.

There is also another prominent motive.  Over the years, I grew disenchanted
with C++, especially when new, conceptually sound compiled languages started
to emerge. Who knows how many of those languages were developed out of
frustration with C++? D is a clear example of that. If there really is a
smaller and cleaner language within C++ struggling to get out, well, that
struggle is real. The way I see it, you cannot make the language lean and at
the same time keep compatibility with all the accumulated cruft that's rooted
in C.

That being said, C++ is the only compiled language that is available on all
platforms, so I'm stuck with it for the foreseeable future. The B library is
the tool that makes programming in C++ a more enjoyable experience for me.

The library provides the following functionality:

Class           Header                  Description
--------        --------------------    ------------------------------------
b::arg_list     <b/arg_list.h>          Implementation of an obscure
                                        technique for passing a
                                        variable-length list of named
                                        parameters to a function or a method.


b::array<T>     <b/array.h>             Array template type. Uses the
                                        copy-on-write technique for memory
                                        management.


b::binary_search_tree<Key_op>           Low-level structure that implements
                <b/binary_tree.h>       a non-balancing binary search tree.


b::cli          <b/cli.h>               POSIX-compatible command line parser
                                        and help screen generator.


b::heap<T>      <b/heap.h>              Priority heap implementation.


b::levenshtein_distance                 Edit distance calculation.
                <b/levenshtein_distance.h>


b::map<Key, T>  <b/map.h>               Template implementation of an
                                        associative array container type.


b::object       <b/object.h>            Base class with reference count
                                        support.


b::pathname     <b/pathname.h>          Pathname parsing and normalization
                                        with additional modification operations.


b::random       <b/random.h>            A linear congruential generator.


b::ref_count    <b/ref_count.h>         Portable thread-safe reference
                                        counter.


b::ref          <b/ref.h>               Smart pointer to instances of all
                                        classes derived from 'b::object'.


b::set<T>       <b/set.h>               A set of unique objects of type T.


b::string       <b/string.h>            Generic string type, both byte
b::wstring                              character and wide character versions.
                                        Uses the copy-on-write technique.



b::string_view  <b/string_view.h>       A pointer to a string segment. Useful
b::wstring_view                         in parameters and for temporary strings.



b::input_stream <b/io_streams.h>        Various input/output interfaces.
b::output_stream
b::seekable
b::seekable_input_stream
b::seekable_output_stream
b::input_output_stream


b::doubly_linked_list<Node_access>      Various linked list classes.
                <b/doubly_linked_list.h>
b::doubly_linked_list_container<T>
                <b/doubly_linked_list_container.h>
b::linked_list<Node_access>
                <b/linked_list.h>
b::linked_list_container<T>
                <b/linked_list_container.h>


b::exception    <b/exception.h>         Various exception classes.
b::runtime_exception
                <b/runtime_exception.h>
b::custom_exception
                <b/custom_exception.h>
b::system_exception
                <b/system_exception.h>
